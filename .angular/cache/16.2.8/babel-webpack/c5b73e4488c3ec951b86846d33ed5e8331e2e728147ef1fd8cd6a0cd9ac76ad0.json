{"ast":null,"code":"import { Subject, map, share } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@stomp/rx-stomp\";\nexport class WebSocketService {\n  constructor(stomp) {\n    this.stomp = stomp;\n    this.notify = new Subject();\n    this.newMessage = new Subject();\n    this.notify = stomp.watch('/notifier/message').pipe(map(message => JSON.parse(message.body)), share({\n      resetOnRefCountZero: true\n    }));\n    this.newMessage = stomp.watch('/notifier/new-message').pipe(map(message => JSON.parse(message.body)), share({\n      resetOnRefCountZero: true\n    }));\n  }\n  send(message) {\n    this.stomp.publish({\n      destination: '/app/message',\n      body: JSON.stringify(message),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n  }\n  static #_ = this.ɵfac = function WebSocketService_Factory(t) {\n    return new (t || WebSocketService)(i0.ɵɵinject(i1.RxStomp));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebSocketService,\n    factory: WebSocketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","map","share","WebSocketService","constructor","stomp","notify","newMessage","watch","pipe","message","JSON","parse","body","resetOnRefCountZero","send","publish","destination","stringify","headers","_","i0","ɵɵinject","i1","RxStomp","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\GersonJr\\Desktop\\projetos\\angular\\projeto-websocket\\src\\app\\websocket.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport { RxStomp } from \"@stomp/rx-stomp\";\r\nimport { Subject, from, map, share } from 'rxjs';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WebSocketService {\r\n\r\n  notify: Observable<any> = new Subject();\r\n  newMessage: Observable<any> = new Subject();\r\n \r\n  constructor(private stomp: RxStomp) {\r\n    this.notify = stomp.watch('/notifier/message')\r\n      .pipe(\r\n        map(message => JSON.parse(message.body)),\r\n        share({resetOnRefCountZero: true})\r\n      );\r\n \r\n    this.newMessage = stomp.watch('/notifier/new-message')\r\n      .pipe(\r\n        map(message => JSON.parse(message.body)),\r\n        share({resetOnRefCountZero: true})\r\n      )\r\n  }\r\n \r\n  send(message: any) {\r\n    this.stomp.publish({\r\n      destination: '/app/message',\r\n      body: JSON.stringify(message),\r\n      headers: {'content-type': 'application/json'}\r\n    });\r\n  }\r\n}"],"mappings":"AAEA,SAASA,OAAO,EAAQC,GAAG,EAAEC,KAAK,QAAQ,MAAM;;;AAMhD,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,KAAc;IAAd,KAAAA,KAAK,GAALA,KAAK;IAHzB,KAAAC,MAAM,GAAoB,IAAIN,OAAO,EAAE;IACvC,KAAAO,UAAU,GAAoB,IAAIP,OAAO,EAAE;IAGzC,IAAI,CAACM,MAAM,GAAGD,KAAK,CAACG,KAAK,CAAC,mBAAmB,CAAC,CAC3CC,IAAI,CACHR,GAAG,CAACS,OAAO,IAAIC,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC,EACxCX,KAAK,CAAC;MAACY,mBAAmB,EAAE;IAAI,CAAC,CAAC,CACnC;IAEH,IAAI,CAACP,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,uBAAuB,CAAC,CACnDC,IAAI,CACHR,GAAG,CAACS,OAAO,IAAIC,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC,EACxCX,KAAK,CAAC;MAACY,mBAAmB,EAAE;IAAI,CAAC,CAAC,CACnC;EACL;EAEAC,IAAIA,CAACL,OAAY;IACf,IAAI,CAACL,KAAK,CAACW,OAAO,CAAC;MACjBC,WAAW,EAAE,cAAc;MAC3BJ,IAAI,EAAEF,IAAI,CAACO,SAAS,CAACR,OAAO,CAAC;MAC7BS,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB;KAC7C,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAzBUjB,gBAAgB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBtB,gBAAgB;IAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { filter, first, Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  /**\n   * Create an instance, see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n   */\n  constructor(rxStomp, stompRPCConfig) {\n    this.rxStomp = rxStomp;\n    this.stompRPCConfig = stompRPCConfig;\n    this._replyQueueName = '/temp-queue/rpc-replies';\n    this._setupReplyQueue = () => {\n      return this.rxStomp.unhandledMessage$;\n    };\n    this._customReplyQueue = false;\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._customReplyQueue = true;\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n  /**\n   * Make an RPC request.\n   * See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for example.\n   *\n   * It is a simple wrapper around [RxStompRPC#stream]{@link RxStompRPC#stream}.\n   */\n  rpc(params) {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n  /**\n   * Make an RPC stream request. See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n   *\n   * Note: This call internally takes care of generating a correlation id,\n   * however, if `correlation-id` is passed via `headers`, that will be used instead.\n   */\n  stream(params) {\n    // defensively copy\n    const headers = {\n      ...(params.headers || {})\n    };\n    if (!this._repliesObservable) {\n      const repliesObservable = this._setupReplyQueue(this._replyQueueName, this.rxStomp);\n      // In case of custom queue, ensure it remains subscribed\n      if (this._customReplyQueue) {\n        this._dummySubscription = repliesObservable.subscribe(() => {});\n      }\n      this._repliesObservable = repliesObservable;\n    }\n    return Observable.create(rpcObserver => {\n      let defaultMessagesSubscription;\n      const correlationId = headers['correlation-id'] || uuid();\n      defaultMessagesSubscription = this._repliesObservable.pipe(filter(message => {\n        return message.headers['correlation-id'] === correlationId;\n      })).subscribe(message => {\n        rpcObserver.next(message);\n      });\n      // send an RPC request\n      headers['reply-to'] = this._replyQueueName;\n      headers['correlation-id'] = correlationId;\n      this.rxStomp.publish({\n        ...params,\n        headers\n      });\n      return () => {\n        // Cleanup\n        defaultMessagesSubscription.unsubscribe();\n      };\n    });\n  }\n}","map":{"version":3,"names":["filter","first","Observable","v4","uuid","RxStompRPC","constructor","rxStomp","stompRPCConfig","_replyQueueName","_setupReplyQueue","unhandledMessage$","_customReplyQueue","replyQueueName","setupReplyQueue","rpc","params","stream","pipe","headers","_repliesObservable","repliesObservable","_dummySubscription","subscribe","create","rpcObserver","defaultMessagesSubscription","correlationId","message","next","publish","unsubscribe"],"sources":["C:/Users/GersonJr/Desktop/projetos/angular/projeto-websocket/node_modules/@stomp/rx-stomp/esm6/rx-stomp-rpc.js"],"sourcesContent":["import { filter, first, Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n    /**\n     * Create an instance, see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n     */\n    constructor(rxStomp, stompRPCConfig) {\n        this.rxStomp = rxStomp;\n        this.stompRPCConfig = stompRPCConfig;\n        this._replyQueueName = '/temp-queue/rpc-replies';\n        this._setupReplyQueue = () => {\n            return this.rxStomp.unhandledMessage$;\n        };\n        this._customReplyQueue = false;\n        if (stompRPCConfig) {\n            if (stompRPCConfig.replyQueueName) {\n                this._replyQueueName = stompRPCConfig.replyQueueName;\n            }\n            if (stompRPCConfig.setupReplyQueue) {\n                this._customReplyQueue = true;\n                this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n            }\n        }\n    }\n    /**\n     * Make an RPC request.\n     * See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for example.\n     *\n     * It is a simple wrapper around [RxStompRPC#stream]{@link RxStompRPC#stream}.\n     */\n    rpc(params) {\n        // We know there will be only one message in reply\n        return this.stream(params).pipe(first());\n    }\n    /**\n     * Make an RPC stream request. See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n     *\n     * Note: This call internally takes care of generating a correlation id,\n     * however, if `correlation-id` is passed via `headers`, that will be used instead.\n     */\n    stream(params) {\n        // defensively copy\n        const headers = { ...(params.headers || {}) };\n        if (!this._repliesObservable) {\n            const repliesObservable = this._setupReplyQueue(this._replyQueueName, this.rxStomp);\n            // In case of custom queue, ensure it remains subscribed\n            if (this._customReplyQueue) {\n                this._dummySubscription = repliesObservable.subscribe(() => { });\n            }\n            this._repliesObservable = repliesObservable;\n        }\n        return Observable.create((rpcObserver) => {\n            let defaultMessagesSubscription;\n            const correlationId = headers['correlation-id'] || uuid();\n            defaultMessagesSubscription = this._repliesObservable\n                .pipe(filter((message) => {\n                return message.headers['correlation-id'] === correlationId;\n            }))\n                .subscribe((message) => {\n                rpcObserver.next(message);\n            });\n            // send an RPC request\n            headers['reply-to'] = this._replyQueueName;\n            headers['correlation-id'] = correlationId;\n            this.rxStomp.publish({ ...params, headers });\n            return () => {\n                // Cleanup\n                defaultMessagesSubscription.unsubscribe();\n            };\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;AAChD,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,CAAC;EACpB;AACJ;AACA;EACIC,WAAWA,CAACC,OAAO,EAAEC,cAAc,EAAE;IACjC,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,eAAe,GAAG,yBAAyB;IAChD,IAAI,CAACC,gBAAgB,GAAG,MAAM;MAC1B,OAAO,IAAI,CAACH,OAAO,CAACI,iBAAiB;IACzC,CAAC;IACD,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B,IAAIJ,cAAc,EAAE;MAChB,IAAIA,cAAc,CAACK,cAAc,EAAE;QAC/B,IAAI,CAACJ,eAAe,GAAGD,cAAc,CAACK,cAAc;MACxD;MACA,IAAIL,cAAc,CAACM,eAAe,EAAE;QAChC,IAAI,CAACF,iBAAiB,GAAG,IAAI;QAC7B,IAAI,CAACF,gBAAgB,GAAGF,cAAc,CAACM,eAAe;MAC1D;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACC,MAAM,EAAE;IACR;IACA,OAAO,IAAI,CAACC,MAAM,CAACD,MAAM,CAAC,CAACE,IAAI,CAACjB,KAAK,CAAC,CAAC,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIgB,MAAMA,CAACD,MAAM,EAAE;IACX;IACA,MAAMG,OAAO,GAAG;MAAE,IAAIH,MAAM,CAACG,OAAO,IAAI,CAAC,CAAC;IAAE,CAAC;IAC7C,IAAI,CAAC,IAAI,CAACC,kBAAkB,EAAE;MAC1B,MAAMC,iBAAiB,GAAG,IAAI,CAACX,gBAAgB,CAAC,IAAI,CAACD,eAAe,EAAE,IAAI,CAACF,OAAO,CAAC;MACnF;MACA,IAAI,IAAI,CAACK,iBAAiB,EAAE;QACxB,IAAI,CAACU,kBAAkB,GAAGD,iBAAiB,CAACE,SAAS,CAAC,MAAM,CAAE,CAAC,CAAC;MACpE;MACA,IAAI,CAACH,kBAAkB,GAAGC,iBAAiB;IAC/C;IACA,OAAOnB,UAAU,CAACsB,MAAM,CAAEC,WAAW,IAAK;MACtC,IAAIC,2BAA2B;MAC/B,MAAMC,aAAa,GAAGR,OAAO,CAAC,gBAAgB,CAAC,IAAIf,IAAI,CAAC,CAAC;MACzDsB,2BAA2B,GAAG,IAAI,CAACN,kBAAkB,CAChDF,IAAI,CAAClB,MAAM,CAAE4B,OAAO,IAAK;QAC1B,OAAOA,OAAO,CAACT,OAAO,CAAC,gBAAgB,CAAC,KAAKQ,aAAa;MAC9D,CAAC,CAAC,CAAC,CACEJ,SAAS,CAAEK,OAAO,IAAK;QACxBH,WAAW,CAACI,IAAI,CAACD,OAAO,CAAC;MAC7B,CAAC,CAAC;MACF;MACAT,OAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAACV,eAAe;MAC1CU,OAAO,CAAC,gBAAgB,CAAC,GAAGQ,aAAa;MACzC,IAAI,CAACpB,OAAO,CAACuB,OAAO,CAAC;QAAE,GAAGd,MAAM;QAAEG;MAAQ,CAAC,CAAC;MAC5C,OAAO,MAAM;QACT;QACAO,2BAA2B,CAACK,WAAW,CAAC,CAAC;MAC7C,CAAC;IACL,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}